@page "/"
@using Blazored.LocalStorage
@using FunAsiaGo.Dto.Responses
@inject NavigationManager _navigationManager
@inject ILocalStorageService _LocalStorage
@inject IHttpService _httpService
<PageTitle>Fun Asia Go - Discover Asia Your Way</PageTitle>

<section class="pt-3 pb-13">
<div class="container">
<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-12">
    <div class="d-flex flex-column justify-content-center h-100 gap-3">
        <div>
            <h1 id="title" class="fs-3x">Discover Asia Your Way</h1>
            <div class="fs-3">Current Asian Destination Available</div>
        </div>
      <div class="d-flex gap-3">
                <button class="btn btn-warning fw-bolder fs-3"
                        @onclick="async () => {await SetFilterCountry(2);}">Malaysia
                </button>
                <button class="btn btn-primary fw-bolder fs-3" style="background-color: #001478 !important;"
                        @onclick="async () => {await SetFilterCountry(1);}">
                    ThaiLand
                </button>
                <button class="btn btn-danger fw-bolder fs-3"
                        @onclick="async () => {await SetFilterCountry(0);}">Vietnam
                </button>
            </div>
        <div>
            <div class="d-flex align-items-center">
                <div class="symbol symbol-25px me-3">
                    <img src="img/icons/el-usd.svg" alt="">
                </div>
                <div class="fs-3">Fixed day price</div>
            </div>
            <div class="d-flex align-items-center">
                <div class="symbol symbol-25px me-3">
                    <img src="img/icons/bxs-plane-alt.svg" alt="">
                </div>
                <div class="fs-3">Guarantee weekly departure year around</div>
            </div>
            <div class="d-flex align-items-center">
                <div class="symbol symbol-25px me-3">
                    <img src="img/icons/mingcute-suitcase-fill.svg" alt="">
                </div>
                <div class="fs-3">Free to join and leave</div>
            </div>
            <div class="d-flex align-items-center">
                <div class="symbol symbol-25px me-3">
                    <img src="img/icons/tabler-bus-filled.svg" alt="">
                </div>
                <div class="fs-3">Easily mix &amp; match routes</div>
            </div>
            <div class="d-flex align-items-center">
                <div class="symbol symbol-25px me-3">
                    <img src="img/icons/solar-city-bold-duotone.svg" alt="">
                </div>
                <div class="fs-3">Over 30 cities / provinces</div>
            </div>
        </div>
        <div class="d-flex flex-column gap-3">
            <div class="d-flex flex-column align-items-start">
                <div class="rounded-4 p-4 mx-10" style="background-color: #79da5a;">
                    <div class="d-flex flex-column">
                        <div class="fs-3 fw-bold" style="color: #fff">Tour Price</div>
                        <div class="fs-3" style="color: #fff">USD <span class="fs-3x fw-bold">$82</span> /Day</div>
                    </div>
                    <div class="px-5 py-2 rounded" style="background-color: #1c5d07;">
                        <a href="/routes" class="w-100">
                            <div class="fs-3 text-center" style="color: #fff">
                                Book Now
                            </div>
                        </a>
                    </div>
                </div>
            </div>
            <div class="d-md-flex flex-md-row gap-10">
                <div class="d-flex flex-column gap-3">
                    <div class="fs-3 fw-bold">Including</div>
                    <div class="d-flex flex-column">
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-check-circle fs-1 text-success me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">Accommodation with breakfast (Minimum 2 days/twin share).</span>
                        </div>
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-check-circle fs-1 text-success me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">Transportation.</span>
                        </div>
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-check-circle fs-1 text-success me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">English-speaking guide.</span>
                        </div>
                    </div>
                </div>
                <div class="d-flex flex-column gap-3">
                    <div class="fs-3 fw-bold">Excluding</div>
                    <div class="d-flex flex-column">
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-cross-circle fs-1 text-danger me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">Air tickets & related expenses.</span>
                        </div>
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-cross-circle fs-1 text-danger me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">Travel insurance and visa fees.</span>
                        </div>
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-cross-circle fs-1 text-danger me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">Attraction entrance fees & other personal expenses.</span>
                        </div>
                        <div class="d-flex align-items-center mb-2 move-top">
                            <i class="ki-duotone ki-cross-circle fs-1 text-danger me-3">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <span class="fs-4">Gratuity at USD $5 per day per person paying full adult tour price.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-12">
      <div>
      <img class="w-100" src="/img/all-tour-lines-map.webp" alt=""/>
      </div> 
    </div>
  </div>
</div>
</section>

@if (!RendererInfo.IsInteractive)
{
    <p>Loading....</p>
}
else
{
    if (_items is { Count: > 0 })
    {
        <section class="">
            <div class="container">
                <div class="row">
                    @foreach (var item in _items)
                    {
                        var path = $"{item.MediaSources?.Find(w => w.Scope == 0)?.Path}";
                        var paths = item.Days?.Where(w => w.MediaSource != null)
                            .SelectMany(s => s.MediaSource!.Where(w => w.Scope == 0).Select(sm => sm.Path)).ToList();
                        var path1 = path;
                        if (paths is { Count: > 0 })
                        {
                            var rand = new Random();
                            var index = rand.Next(paths.Count());
                            path1 = paths[index];
                        }

                        if (path.Length > 4 && path[..4] != "http")
                        {
                            path = $"{_navigationManager.BaseUri}images/tour/{path}";
                            path1 = $"{_navigationManager.BaseUri}images/tour/{path1}";
                        }

                        <div class="col-lg-4 col-md-6 col-sm-12 mb-10">
                            <div class="card card-flush h-xl-100 card-tour">
                                <div
                                    class="card-header rounded bgi-no-repeat bgi-size-cover bgi-position-y-top bgi-position-x-center align-items-start min-h-300px card-img-tour"
                                    style="background-image:url('@path')" data-default="@path" data-hover="@path1"
                                    data-bs-theme="light">
                                    <img class="d-none w-1px h-1px" src="@path1" alt=""/>
                                </div>
                                <div class="card-body">
                                    <div class="position-relative ps-6 pe-3 py-2">
                                        <div class="position-absolute start-0 top-0 w-8px h-100 rounded-2"
                                            style="background-color: var(@($"--bs-{item.Color}")"></div>
                                        <div class="text-gray-900 fw-bold text-uppercase fs-2">@item.Name</div>
                                    </div>
                                    <div class="my-6 fs-3">
                                        @((MarkupString)$"{item.Description}")
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <div class="fs-2 fw-bold text-gray-800">
                                            <i class="bi-clock-fill"></i> @(item.TourDuration) Days
                                        </div>
                                        <div class="th-btn  style4" @onclick="() => ShowRoadTour(item)">
                                            Road Tour
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="th-btn style-radius w-100 bg-success fw-bold fs-2"
                                        @onclick="(e) => {SetTour(item); }">
                                        BOOK NOW
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </section>
    }
}


<CustomModal Title="Road Tour" CancelTitle="Close" HideSaveButton="true" ModalClass="2" NoFooter="true">
    @if (!IsLoadingFile)
    {
        <div id="tourdiv" class="h-600px"></div>
    }
</CustomModal>

<div
    id="kt_drawer_package_tour"
    class="bg-white"
    data-kt-drawer="true"
    data-kt-drawer-activate="true"
    data-kt-drawer-name="docs"
    data-kt-drawer-overlay="true"
    data-kt-drawer-width="{default:'300px', 'md': '400px'}"
    data-kt-drawer-direction="end"
    data-kt-drawer-close="#kt_package_tour_close"
>
    <div class="card shadow-none border-0 rounded-0">
        <div class="card-header" id="kt_package_tour_header">
            <h3 class="card-title fw-bold text-gray-900">Package Tour</h3>
            <div class="card-toolbar">
                <button type="button" class="btn btn-sm btn-icon btn-active-light-primary me-n5"
                        id="kt_package_tour_close">
                    <i class="ki-duotone ki-cross fs-1"><span class="path1"></span><span class="path2"></span></i>
                </button>
            </div>
        </div>
        <div class="card-body position-relative scroll-y">
            @if (_items is { Count: > 0 })
            {
                foreach (var item in _items.Where(w => w.Country == _filterCountry))
                {
                    var path = $"{item.MediaSources?.Find(w => w.Scope == 0)?.Path}";
                    if (path.Length > 4 && path[..4] != "http")
                    {
                        path = $"images/tour/{path}";
                    }

                    <div class="card border-hover-info my-6">
                        <div
                            class="card-header rounded bgi-no-repeat bgi-size-cover bgi-position-y-top bgi-position-x-center align-items-start h-200px"
                            style="background-image:url('@path')"
                            data-bs-theme="light">
                        </div>
                        <div class="card-body">
                            <div class="position-relative ps-6 pe-3 py-2">
                                <div class="position-absolute start-0 top-0 w-8px h-100 rounded-2"
                                     style="background-color: var(@($"--bs-{item.Color}")"></div>
                                <div class="text-gray-900 fw-bold text-uppercase fs-6">@item.Name</div>
                            </div>
                            <div class="my-3 fs-6">
                                @((MarkupString)$"{item.Description}")
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <div class="fs-6 fw-bold text-gray-800">
                                    <i class="bi-clock-fill"></i> @(item.TourDuration) Days
                                </div>
                                <div class="btn btn-sm btn-light-info" @onclick="() => ShowRoadTour(item)">
                                    Road Tour
                                </div>
                            </div>
                            <div class="btn btn-sm btn-success style-radius w-100"
                                 @onclick="(e) => {SetTour(item); }">
                                BOOK NOW
                            </div>
                        </div>
                    </div>
                }
            }

        </div>
    </div>
</div>

@code
{
    private bool IsLoadingFile = false;
    private List<TourProductionDto>? _items;
    private bool _initChart = false;
    private TourProductionDto? _selectTour;
    private string? _filterCountry = "";

    private bool _initAni = false;
    protected override async Task OnInitializedAsync()
    {
        _items = await _httpService.GetAsync<List<TourProductionDto>>("/api/tourproduction");
        if (_items is { Count: > 0 })
        {
            foreach (var item in _items)
            {
                foreach (var stop in item.Days!.SelectMany(day => day.Stops!))
                {
                    stop.TourId = $"{item.Id}";
                }
            }
        }
        _items = _items?.OrderBy(o => o.Country).ToList();
        _initAni = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_initAni)
        {
            _initAni = false;
            //await CallJs("aniHome");
            if (_items is { Count: > 0 })
            {
                await _LocalStorage.SetItemAsync("tours", _items);
            }
            await JsRuntime.InvokeVoidAsync("initChangeImg");
        }

        if (_initChart)
        {
            _initChart = false;
            if (_selectTour == null) return;
            var data = new List<RoadTourData>();
            var dStart = DateTime.Today;
            if (_selectTour.DDow != (int)dStart.DayOfWeek)
            {
                do
                {
                    dStart = dStart.AddHours(1);
                } while (_selectTour.DDow != (int)dStart.DayOfWeek);
            }

            var dDistance = 0.0;
            foreach (var t in _selectTour!.Days!.OrderBy(o => o.Position).WithIndex())
            {
                var stops = t.item.Stops?.OrderBy(o => o.Position).ToList();
                if (stops is { Count: 0 }) continue;
                var stop = stops!.LastOrDefault();
                dDistance += t.item.Distance;
                if (t.index == 0)
                {
                    data.Add(new RoadTourData()
                    {
                        Name = $"{stops?.FirstOrDefault()?.Name} - Day {t.index + 1}",
                        Distance = 0,
                        Date = dStart,
                        Population = 9,
                        Moving = 0
                    });
                }
                else
                {
                    data.Add(new RoadTourData()
                    {
                        Name = $"{stop?.Name} - Day {t.index + 1}",
                        Distance = dDistance,
                        Population = (t.index == _selectTour.Days?.Count || stop!.IsCityTour) ? 9 : 7,
                        Date = dStart,
                        Moving = t.item.Distance
                    });
                }

                dStart = dStart.AddDays(1);
            }

            await JsRuntime.InvokeVoidAsync("roadTrip", data);
            await JsRuntime.InvokeVoidAsync("ToggleModal", "#modal-form");
        }
    }

    private void SetTour(TourProductionDto tour)
    {
        //var index = _items?.IndexOf(tour) ?? 0;
        _navigationManager.NavigateTo($"/booking/{tour.Id}?slug={tour.Slug}");
    }

    private async Task ShowRoadTour(TourProductionDto item)
    {
        IsLoadingFile = true;
        StateHasChanged();
        await Task.Delay(500);
        _selectTour = item;
        _initChart = true;
        IsLoadingFile = false;
        StateHasChanged();
    }

    private async Task SetFilterCountry(int country)
    {
        _filterCountry = country switch
        {
            1 => "TH",
            2 => "MY",
            _ => "VN"
        };
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("showDrawer", "#kt_drawer_package_tour");
    }
} 
